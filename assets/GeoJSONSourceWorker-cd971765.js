import{cw as I,cx as R,p as E,cy as Q,cz as D,cA as v,bQ as Z,cB as N,bl as P,am as G,as as M,H as B,cC as C}from"./index-f00bd99f.js";import{u as z,l as L,r as H,s as J,o as U}from"./featureConversionUtils-f7ab006d.js";import{u as W}from"./executeQueryForSnapping-b6c8d1c4.js";import{f as V}from"./FeatureStore-41b79be2.js";import{x as b,j as w}from"./FixedIntervalBinParameters-c92437fc.js";import{L as Y}from"./QueryEngine-6723a34b.js";import{I as K,N as X,E as ee}from"./geojson-98445ab0.js";import{u as te,l as ie,a as se}from"./clientSideDefaults-c074d183.js";import{E as re,d as T,f as j,p as F,h as O,S as ne}from"./sourceUtils-04396c3a.js";import"./OptimizedFeature-a0a9dac6.js";import"./memoryEstimations-368c31a0.js";import"./OptimizedFeatureSet-5dc8ee29.js";import"./normalizeUtils-e6e5ded6.js";import"./normalizeUtilsCommon-3a54feae.js";import"./BoundsStore-8fb9ad0b.js";import"./PooledRBush-859ea7f2.js";import"./quickselect-b7b34c34.js";import"./optimizedFeatureQueryEngineAdapter-e87cd9e9.js";import"./json-48e3ea08.js";import"./WhereClauseCache-89a3b7dc.js";import"./WhereClause-6167c62b.js";import"./QueryEngineCapabilities-4b2bc619.js";import"./quantizationUtils-4020db87.js";import"./utils-9fa0ff83.js";import"./utils-2cad792c.js";import"./utils-7142f869.js";import"./ClassBreaksDefinition-2050dd64.js";import"./signal-f297c7bf.js";import"./date-bf306b67.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:ne};class ve{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=K(i,{geometryType:e.geometryType}),u=e.fields||r.fields||[],l=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let y=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let o=e.timeInfo;u===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const m=new R(u);let n=m.get(y);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,y=n.name):(n={alias:y,name:y,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(n));const p={};for(const a of u){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!Q.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=D(a);_!==void 0&&(p[a.name]=_)}a.length==null&&(a.length=v(a))}if(o){if(o.startTimeField){const a=m.get(o.startTimeField);a?(o.startTimeField=a.name,a.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const a=m.get(o.endTimeField);a?(o.endTimeField=a.name,a.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const a=m.get(o.trackIdField);a?o.trackIdField=a.name:(o.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const h=d?te(d):void 0,c=m.dateFields.length?{timeZoneIANA:Z}:null,g={warnings:s,featureErrors:[],layerDefinition:{...ae,drawingInfo:h??void 0,templates:ie(p),extent:void 0,geometryType:d,objectIdField:y,fields:u,hasZ:!!l,timeInfo:o,dateFieldsTimeReference:c}},$={type:"object-id",fieldName:y};this._queryEngine=new Y({fieldsIndex:R.fromLayerJSON({fields:u,timeInfo:o,dateFieldsTimeReference:c}),geometryType:d,hasM:!1,hasZ:l,featureIdInfo:$,spatialReference:f,timeInfo:o,featureStore:new V({geometryType:d,hasM:!1,hasZ:l})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=se(p,y);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:A,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=A,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([re(t,s),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),W(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=N(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)},i=>{this._queryEngine.featureStore.clear(),P(i)||G.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=X(e,{geometryType:t,hasZ:s,objectIdField:i});if(!M(this._queryEngine.spatialReference,I))for(const u of r)u.geometry!=null&&(u.geometry=z(w(L(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await B(t??"",{responseType:"json",query:{...s},signal:e})).data;return ee(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const u of e){const l=this._createDefaultAttributes(),d=T(i,l,u.attributes,!0);d?t?.push(d):(this._assignObjectId(l,u.attributes,!0),u.attributes=l,u.objectId=l[s],r.push(u))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const d of i)r.deleteResults.push(j(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:u,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:l,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:u,objectIdField:l,spatialReference:d,featureStore:y,fieldsIndex:f}=this._queryEngine,o=[],m={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&i!==C(n.geometry)){s.push(F("Incorrect geometry type."));continue}const p=this._createDefaultAttributes(),h=T(f,p,n.attributes);if(h)s.push(h);else{if(this._assignObjectId(p,n.attributes),n.attributes=p,n.uid!=null){const c=n.attributes[l];e.uidToObjectId[n.uid]=c}if(n.geometry!=null){const c=n.geometry.spatialReference??d;n.geometry=w(O(n.geometry,c),c,d)}o.push(n),s.push(j(n.attributes[l]))}}y.addMany(H([],o,i,u,r,m))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:u,spatialReference:l,featureStore:d,fieldsIndex:y}=this._queryEngine,f={type:"object-id",fieldName:u};for(const o of t){const{attributes:m,geometry:n}=o,p=m?.[u];if(p==null){e.push(F(`Identifier field ${u} missing`));continue}if(!d.has(p)){e.push(F(`Feature with object id ${p} missing`));continue}const h=J(d.getFeature(p),s,r,i);if(n!=null){if(s!==C(n)){e.push(F("Incorrect geometry type."));continue}const c=n.spatialReference??l;h.geometry=w(O(n,c),c,l)}if(m){const c=T(y,h.attributes,m);if(c){e.push(c);continue}}d.add(U(h,s,r,i,f)),e.push(j(p))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{ve as default};
