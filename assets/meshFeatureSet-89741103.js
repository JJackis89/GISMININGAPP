import{dQ as d,f as h,ay as S,z as g,dR as N,bY as l,am as D}from"./index-8ee34b61.js";import{q as y}from"./Mesh-23fd242b.js";import{n as M,i as F}from"./External-3bf08a6c.js";import{n as T,i as I}from"./meshFeatureAttributes-20c7fdc7.js";import"./MeshTransform-f54c0aff.js";import"./mat4f64-a3dc1405.js";import"./quat-3ef9ebee.js";import"./mat3f64-d34bdb1e.js";import"./quatf64-216ddd5a.js";import"./vec32-37618b70.js";import"./imageUtils-1959a448.js";import"./MeshVertexAttributes-edd30e12.js";import"./MeshLocalVertexSpace-b4d6a09d.js";import"./meshVertexSpaceUtils-738177a0.js";import"./earcut-5a6c70eb.js";import"./Indices-e0ee64fb.js";import"./plane-881ab901.js";import"./vectorStacks-f3f45332.js";import"./vec2f64-44b9a02c.js";import"./deduplicate-eda0850f.js";import"./projectPointToVector-030380a1.js";import"./vertexSpaceConversion-68edf03f.js";import"./mat3-848c9a5e.js";import"./spatialReferenceEllipsoidUtils-b06c2c3c.js";import"./computeTranslationToOriginAndRotation-e96691a8.js";import"./vec3-fc54a44a.js";import"./BufferView-b8fa1162.js";import"./vec2-08ad2285.js";import"./vec4-63e2976c.js";const b=()=>D.getLogger("esri.rest.support.meshFeatureSet");function it(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=d.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=O(o,e.assetMaps),i=t.sourceSpatialReference??h.WGS84,m=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?w(a.includes("*")?null:new Set(a)):()=>({});for(const p of r){const u=L(p,m,i,o,n);s.features.push(new S({geometry:u,attributes:f(p)}))}return s}function w(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=g.fromJSON(t.geometry);a.spatialReference=e;const f=I(t.attributes,r.transformFieldRoles),p=e.isGeographic?"local":"georeferenced",u=$(i);return u?y.createWithExternalSource(m,u,{extent:a,transform:f,vertexSpace:p,unitConversionDisabled:!0}):y.createIncomplete(m,{extent:a,transform:f,vertexSpace:p})}var c;function O(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,f=r.conversionStatus,p=r.seqNo,u=N(i,t.supportedFormats);if(!u){b().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=l(e,s,()=>({files:new Map}));l(E.files,n,()=>({name:n,type:i,mimeType:u,status:P(f),parts:[]})).parts[p]={hash:m,url:a}}return e}function $(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==c.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new M(n.url,n.hash))}e.push(new F(r.name,r.mimeType,s))}return{type:"service",assets:e}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,it as meshFeatureSetFromJSON};
