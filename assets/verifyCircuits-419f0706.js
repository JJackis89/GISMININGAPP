import{r as t,m as o,e0 as h,a as u,l as y,Z as j,g as w,u as g,s as O,H as S}from"./index-f00bd99f.js";import{t as x}from"./utils-96fabd6e.js";import"./applyEditsUtils-fe2d17d5.js";import"./MeshTransform-feb21e78.js";import"./mat4f64-a3dc1405.js";import"./quat-b2e4eef3.js";import"./mat3f64-d34bdb1e.js";import"./quatf64-216ddd5a.js";import"./vec32-6757f7c3.js";import"./editingSupport-df46d8dc.js";import"./normalizeUtils-e6e5ded6.js";import"./normalizeUtilsCommon-3a54feae.js";let s=class extends y{constructor(i){super(i),this.error=null,this.geometry=null,this.name=null}};t([o({type:Object})],s.prototype,"error",void 0),t([o({type:h})],s.prototype,"geometry",void 0),t([o({type:String})],s.prototype,"name",void 0),s=t([u("esri.rest.networks.circuits.support.CircuitVerifyResult")],s);const m=s;let r=class extends y{constructor(e){super(e),this.circuits=[],this.moment=null,this.exceededTransferLimit=!1,this.serviceEdits=null}readServiceEdits(e,p){return x(e)}};t([o({type:[m],json:{type:[m],write:!0}})],r.prototype,"circuits",void 0),t([o({type:Date,json:{type:Number,write:{writer:(i,e)=>{e.moment=i?i.getTime():null}}}})],r.prototype,"moment",void 0),t([o({type:Boolean,json:{type:Boolean,write:!0}})],r.prototype,"exceededTransferLimit",void 0),t([o({type:[Object],json:{type:[Object],write:!0}})],r.prototype,"serviceEdits",void 0),t([j("serviceEdits")],r.prototype,"readServiceEdits",null),r=t([u("esri.rest.networks.circuits.support.VerifyCircuitsResult")],r);async function D(i,e,p){const c=w(i),n=e.toJSON();e.circuits&&(n.circuits=JSON.stringify(e.circuits));const a={...n,f:"json"},l=g({...c.query,...a}),d=O(l,{...p,method:"post"}),f=`${c.path}/circuits/verify`,{data:v}=await S(f,d);return r.fromJSON(v)}export{D as verifyCircuits};
