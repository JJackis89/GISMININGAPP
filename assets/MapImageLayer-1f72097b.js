import{r as s,m as o,a as L,cr as w,gO as P,gP as E,da as _,fi as T,de as A,dq as D,dc as F,dd as N,df as V,db as M,ds as R,dr as j,dM as J,ab as U,a6 as q,dz as v,dx as f,gQ as k,dT as z,H as b,z as H,ah as C,dO as G,fG as g,gt as W,p as S,bl as Z,fp as x,Z as B,d as K,di as Q,dp as X,_ as Y,eA as ee}from"./index-f00bd99f.js";import{i as te,m as re,f as se,e as I,a as ie}from"./SublayersOwner-8c3a92ae.js";import{t as ae}from"./imageBitmapUtils-ef0e6dc5.js";import"./QueryTask-69c0ac16.js";import"./executeQueryJSON-275db4a9.js";import"./query-451341fb.js";import"./normalizeUtils-e6e5ded6.js";import"./normalizeUtilsCommon-3a54feae.js";import"./pbfQueryUtils-e0baedd7.js";import"./pbf-b0db6978.js";import"./memoryEstimations-368c31a0.js";import"./OptimizedFeature-a0a9dac6.js";import"./OptimizedFeatureSet-5dc8ee29.js";import"./featureConversionUtils-f7ab006d.js";function O(e,t){return"floorInfo"in t&&t.floorInfo?.floorField?oe(e,t.floorInfo.floorField):null}function oe(e,t){if(!e?.length)return null;const r=e.filter(i=>i!=="").map(i=>`'${i}'`);return r.push("''"),`${t} IN (${r.join(",")}) OR ${t} IS NULL`}const ne={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let h=class extends w{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(t=>{const r=O(this.floors,t);return t.toExportImageJSON(r)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&te(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",t=>this.notifyChange(ne[t.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(t=>t.id).join(","):"show:-1":null}get layerDefs(){const e=!!this.floors?.length,t=this.visibleSublayers.filter(r=>r.definitionExpression!=null||e&&r.floorInfo!=null);return t.length?JSON.stringify(t.reduce((r,i)=>{const n=O(this.floors,i),a=P(n,i.definitionExpression);return a!=null&&(r[i.id]=a),r},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const t=this.layer.sublayers,r=this.scale,i=a=>{a.visible&&(r===0||E(r,a.minScale,a.maxScale))&&(a.sublayers?a.sublayers.forEach(i):e.unshift(a))};t&&t.forEach(i);const n=this._get("visibleSublayers");return!n||n.length!==e.length||n.some((a,y)=>e[y]!==a)?e:n}toJSON(){const e=this.layer;let t={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?t.dynamicLayers=this.dynamicLayers:t={...t,layers:this.layers,layerDefs:this.layerDefs},t}};s([o({readOnly:!0})],h.prototype,"dynamicLayers",null),s([o()],h.prototype,"floors",void 0),s([o({readOnly:!0})],h.prototype,"hasDynamicLayers",null),s([o()],h.prototype,"layer",null),s([o({readOnly:!0})],h.prototype,"layers",null),s([o({readOnly:!0})],h.prototype,"layerDefs",null),s([o({type:Number})],h.prototype,"scale",void 0),s([o({readOnly:!0})],h.prototype,"version",null),s([o({readOnly:!0})],h.prototype,"visibleSublayers",null),h=s([L("esri.layers.support.ExportImageParameters")],h);let l=class extends _(T(A(re(se(D(F(N(V(M(R(j(X)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new h({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new J({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=U(async(t,r,i)=>{const{save:n,saveAs:a}=await Y(()=>import("./mapImageLayerUtils-7ca6d381.js"),["assets/mapImageLayerUtils-7ca6d381.js","assets/utils-951de3c1.js","assets/index-f00bd99f.js","assets/index-a5714ce2.css","assets/originUtils-5a133ae6.js","assets/saveUtils-b2e823e3.js"]);switch(t){case g.SAVE:return n(this,r);case g.SAVE_AS:return a(this,i,r)}})}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(q).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let a=!1;const y=v(i.origin);let m;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(y===f.PORTAL_ITEM){const p=this.createSublayersForOrigin("service").sublayers;a=I(n,p,f.SERVICE)}else if(y>f.PORTAL_ITEM){const p=this.createSublayersForOrigin("portal-item");a=I(n,p.sublayers,v(p.origin)),m=p.originWithPartialOverrides}}const d=[],c={writeSublayerStructure:a,...i,minimumWritableOrigin:m};let u=a||this.hasVisibleLayersForOrigin(y);n.forEach(p=>{const $=p.write({},c);d.push($),u=u||p.originOf("visible")==="user"}),d.some(p=>Object.keys(p).length>1)&&(t.layers=d),u&&(t.visibleLayers=n.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,t,r,i){const n=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=i?.floors??null,this._exportImageParameters.scale=k({extent:e,width:t})*n;const a=this._exportImageParameters.toJSON(),y=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},m=e?.spatialReference,d=z(m);a.dpi*=n;const c={};if(i?.timeExtent){const{start:u,end:p}=i.timeExtent.toJSON();c.time=u&&p&&u===p?""+u:`${u??"null"},${p??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:d,imageSR:d,size:t+","+r,...a,...y,...c}}async fetchImage(e,t,r,i){const{data:n}=await this._fetchImage("image",e,t,r,i);return n}async fetchImageBitmap(e,t,r,i){const{data:n,url:a}=await this._fetchImage("blob",e,t,r,i);return ae(n,a,i?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:r}=await b(this.url,t),{extent:i,fullExtent:n,timeExtent:a}=r,y=i||n;return{fullExtent:y&&H.fromJSON(y),timeExtent:a&&C.fromJSON({start:a[0],end:a[1]})}}loadAll(){return G(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(g.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(g.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,t,r,i,n){const a={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,i,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},y=this.parsedUrl.path+"/export";if(a.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:m}=await b(y,a);return{data:m,url:y}}catch(m){throw Z(m)?m:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${y}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};s([o(x("dateFieldsTimeReference"))],l.prototype,"dateFieldsTimeZone",void 0),s([o({type:Boolean})],l.prototype,"datesInUnknownTimezone",void 0),s([o()],l.prototype,"dpi",void 0),s([o()],l.prototype,"elevationInfo",void 0),s([o()],l.prototype,"gdbVersion",void 0),s([o()],l.prototype,"imageFormat",void 0),s([B("imageFormat",["supportedImageFormatTypes"])],l.prototype,"readImageFormat",null),s([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],l.prototype,"imageMaxHeight",void 0),s([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],l.prototype,"imageMaxWidth",void 0),s([o()],l.prototype,"imageTransparency",void 0),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],l.prototype,"isReference",void 0),s([o({json:{read:!1,write:!1}})],l.prototype,"labelsVisible",void 0),s([o({type:["ArcGISMapServiceLayer"]})],l.prototype,"operationalLayerType",void 0),s([o({json:{read:!1,write:!1}})],l.prototype,"popupEnabled",void 0),s([o(x("preferredTimeReference"))],l.prototype,"preferredTimeZone",void 0),s([o()],l.prototype,"sourceJSON",void 0),s([o({json:{write:{ignoreOrigin:!0}}})],l.prototype,"sublayers",void 0),s([K("sublayers",{layers:{type:[ie]},visibleLayers:{type:[ee]}})],l.prototype,"writeSublayers",null),s([o({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],l.prototype,"listMode",void 0),s([o({json:{read:!1},readOnly:!0,value:"map-image"})],l.prototype,"type",void 0),s([o(Q)],l.prototype,"url",void 0),l=s([L("esri.layers.MapImageLayer")],l);const Ie=l;export{Ie as default};
