import{eg as c,L as x}from"./index-f00bd99f.js";import{w as d,j as g}from"./operatorOffset-1f1dfa8d.js";import{getSpatialReference as f,fromGeometry as y,toGeometry as u,fromGeometries as G}from"./jsonConverter-77f04cbc.js";import"./SimpleGeometryCursor-e3941f41.js";import"./ProjectionTransformation-a3dffea2.js";import"./Envelope2D-4833fda6.js";import"./Point2D-e62ad2de.js";import"./Transformation2D-ab2ac5ee.js";import"./OperatorDefinitions-181ceaf8.js";const l={round:0,bevel:1,miter:2,square:3};function B(t,e,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(t);r&&o&&(e=c(e,r,o));const m=y(t),i=m.getSpatialReference();return u(d(m.getGeometry(),i,e,l[p],a,s),i)}function I(t,e,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(t);r&&o&&(e=c(e,r,o));const[m,i]=G(t);return g(m,i,e,l[p],a,s).map(j=>u(j,i)).filter(x)}export{B as execute,I as executeMany};
