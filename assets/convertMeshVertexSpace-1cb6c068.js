import{T as m,p as s,aD as p}from"./index-8ee34b61.js";import{p as n}from"./MeshVertexAttributes-edd30e12.js";import{B as a}from"./vertexSpaceConversion-68edf03f.js";import"./mat3-848c9a5e.js";import"./mat3f64-d34bdb1e.js";import"./mat4f64-a3dc1405.js";import"./vec32-37618b70.js";import"./spatialReferenceEllipsoidUtils-b06c2c3c.js";import"./computeTranslationToOriginAndRotation-e96691a8.js";import"./projectPointToVector-030380a1.js";import"./meshVertexSpaceUtils-738177a0.js";import"./MeshLocalVertexSpace-b4d6a09d.js";import"./vec3-fc54a44a.js";import"./BufferView-b8fa1162.js";import"./vec2-08ad2285.js";import"./vec2f64-44b9a02c.js";import"./vec4-63e2976c.js";async function j(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{j as convertMeshVertexSpace};
