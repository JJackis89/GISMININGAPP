import{am as M,p as I,eL as O,eM as d,eN as x,aD as v,eO as h,cx as k,eP as S,eQ as g,eR as N,eS as P,bZ as w}from"./index-f00bd99f.js";import{i as T}from"./colorUtils-8a0a0c74.js";import{B as $,H as G,D as E,C as L}from"./quantizationUtils-4020db87.js";function A(p,e,r,t,i,s){if(p==null)return null;const a=p.references("geometry")&&s?D(e,t,s):e,n=p.repurposeFeature(a,i);try{return p.evaluate(n,r)}catch(c){return M.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:",c),null}}const y=new Map;function D(p,e,r){const{transform:t,hasZ:i,hasM:s}=r;y.has(e)||y.set(e,R(e));const a=y.get(e)(p.geometry,t,i,s);return{...p,geometry:a}}function R(p){const e={};switch(p){case"esriGeometryPoint":return(r,t,i,s)=>L(t,e,r,i,s);case"esriGeometryPolygon":return(r,t,i,s)=>E(t,e,r,i,s);case"esriGeometryPolyline":return(r,t,i,s)=>G(t,e,r,i,s);case"esriGeometryMultipoint":return(r,t,i,s)=>$(t,e,r,i,s);default:return M.getLogger("esri.views.2d.support.arcadeOnDemand").error(new I("mapview-arcade",`Unable to handle geometryType: ${p}`)),r=>r}}const F=p=>{if(!p)return[0,0,0,0];const{r:e,g:r,b:t,a:i}=p;return[e,r,t,255*i]},o=class o{static findApplicableOverrides(e,r,t){if(e&&r){if(e.primitiveName){let i=!1;for(const s of t)if(s.primitiveName===e.primitiveName){i=!0;break}if(!i)for(const s of r)s.primitiveName===e.primitiveName&&t.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const i of e.effects)o.findApplicableOverrides(i,r,t);if(e.symbolLayers)for(const i of e.symbolLayers)o.findApplicableOverrides(i,r,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const i of e.effects)o.findApplicableOverrides(i,r,t);if(e.markerPlacement&&o.findApplicableOverrides(e.markerPlacement,r,t),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const i of e.markerGraphics)o.findApplicableOverrides(i,r,t),o.findApplicableOverrides(i.symbol,r,t)}else e.type==="CIMCharacterMarker"?o.findApplicableOverrides(e.symbol,r,t):e.type==="CIMHatchFill"?o.findApplicableOverrides(e.lineSymbol,r,t):e.type==="CIMPictureMarker"&&o.findApplicableOverrides(e.animatedSymbolProperties,r,t)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&O(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const t=d(e),i=e.primitiveName,s=[];for(const a of r)a.primitiveName===i&&s.push(d(a));return{type:"cim-effect-param",effect:t,overrides:x(s)}}static async resolveSymbolOverrides(e,r,t,i,s,a,n){if(!e?.symbol)return null;let{symbol:c,primitiveOverrides:l}=e;const m=!!l;if(!m&&!i)return c;c=v(c),l=v(l);let u=!0;if(r||(r={attributes:{}},u=!1),m){if(u||(l=l.filter(f=>!f.valueExpressionInfo?.expression.includes("$feature"))),n||(l=l.filter(f=>!f.valueExpressionInfo?.expression.includes("$view"))),l.length>0){const f=h(r.attributes),C={spatialReference:t,fields:f,geometryType:s};await o.createRenderExpressions(l,C),o.evaluateOverrides(l,r,s??"esriGeometryPoint",a,n,new k(f))}o.applyOverrides(c,l)}return i&&o.applyDictionaryTextOverrides(c,r,i,null),c}static async createRenderExpressions(e,r){const t=[];for(const i of e){const s=i.valueExpressionInfo;if(!s||o._expressionToRenderExpression.has(s.expression))continue;const a=S(s.expression,r.spatialReference);t.push(a),a.then(n=>o._expressionToRenderExpression.set(s.expression,n))}t.length>0&&await Promise.all(t)}static evaluateOverrides(e,r,t,i,s,a){const n={$view:{scale:s?.scale}};for(const c of e){c.value&&typeof c.value=="object"&&T(c.value)&&(c.propertyName==="Color"||c.propertyName==="StrokeColor")&&(c.value=F(c.value));const l=c.valueExpressionInfo;if(!l)continue;const m=o._expressionToRenderExpression.get(l.expression);m&&(c.value=A(m,r,n,t,a,i))}}static applyDictionaryTextOverrides(e,r,t,i,s="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const a=e.symbolLayers;if(!a)return;for(const n of a)n&&n.type==="CIMVectorMarker"&&o.applyDictionaryTextOverrides(n,r,t,i,e.type==="CIMTextSymbol"?e.textCase:s)}break;case"CIMVectorMarker":{const a=e.markerGraphics;if(!a)return;for(const n of a)n&&o.applyDictionaryTextOverrides(n,r,t,i)}break;case"CIMMarkerGraphic":{const a=e.textString;if(a&&a.includes("[")){const n=g(a,t);e.textString=N(r,n,i,s)}}}}static applyOverrides(e,r,t,i){if(e.primitiveName){for(const s of r)if(s.primitiveName===e.primitiveName){const a=P(s.propertyName);if(i&&i.push({cim:e,nocapPropertyName:a,value:e[a]}),t){let n=!1;for(const c of t)c.primitiveName===e.primitiveName&&(n=!0);n||t.push(s)}s.value!=null&&(e[a]=s.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)o.applyOverrides(s,r,t,i);if(e.symbolLayers)for(const s of e.symbolLayers)o.applyOverrides(s,r,t,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)o.applyOverrides(s,r,t,i);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const s of e.markerGraphics)o.applyOverrides(s,r,t,i),o.applyOverrides(s.symbol,r,t,i)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const t of e)t.value!==void 0&&(r+=`${t.primitiveName}${t.propertyName}${JSON.stringify(t.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(t=>Number(t));if(e==="Color"){const t=new w(r).toRgba();return t[3]*=255,t}return r}};o._expressionToRenderExpression=new Map;let b=o;export{b as OverrideHelper};
