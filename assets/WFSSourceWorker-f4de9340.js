import{p as y,T as p,cx as E,bQ as q,cX as P,cB as I,am as _,cY as g,bl as R,cV as b,as as $}from"./index-f00bd99f.js";import{u as j,l as N}from"./featureConversionUtils-f7ab006d.js";import{u as Q}from"./executeQueryForSnapping-b6c8d1c4.js";import{f as O}from"./FeatureStore-41b79be2.js";import{x as k,j as L}from"./FixedIntervalBinParameters-c92437fc.js";import{L as M}from"./QueryEngine-6723a34b.js";import{E as A,N as U}from"./geojson-98445ab0.js";import{d as Z}from"./sourceUtils-04396c3a.js";import{o as v,e as J,K as f}from"./wfsUtils-fd1b59e1.js";import"./OptimizedFeature-a0a9dac6.js";import"./memoryEstimations-368c31a0.js";import"./OptimizedFeatureSet-5dc8ee29.js";import"./normalizeUtils-e6e5ded6.js";import"./normalizeUtilsCommon-3a54feae.js";import"./BoundsStore-8fb9ad0b.js";import"./PooledRBush-859ea7f2.js";import"./quickselect-b7b34c34.js";import"./optimizedFeatureQueryEngineAdapter-e87cd9e9.js";import"./json-48e3ea08.js";import"./WhereClauseCache-89a3b7dc.js";import"./WhereClause-6167c62b.js";import"./QueryEngineCapabilities-4b2bc619.js";import"./quantizationUtils-4020db87.js";import"./utils-9fa0ff83.js";import"./utils-2cad792c.js";import"./utils-7142f869.js";import"./ClassBreaksDefinition-2050dd64.js";import"./signal-f297c7bf.js";import"./date-bf306b67.js";import"./xmlUtils-444cb4c0.js";const x="esri.layers.WFSLayer";class wt{constructor(){this._customParameters=null,this._queryEngine=null,this._supportsPagination=!0}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(e,t={}){const{getFeatureUrl:a,getFeatureOutputFormat:s,fields:n,geometryType:u,featureType:o,maxRecordCount:i,maxTotalRecordCount:c,maxPageCount:w,objectIdField:d,customParameters:F}=e,{spatialReference:h,getFeatureSpatialReference:m}=v(a,o,e.spatialReference);try{await k(m,h)}catch{throw new y("unsupported-projection","Projection not supported",{inSpatialReference:m,outSpatialReference:h})}p(t),this._customParameters=F,this._featureType=o,this._fieldsIndex=E.fromLayerJSON({fields:n,dateFieldsTimeReference:n.some(S=>S.type==="esriFieldTypeDate")?{timeZoneIANA:q}:null}),this._geometryType=u,this._getFeatureUrl=a,this._getFeatureOutputFormat=s,this._getFeatureSpatialReference=m,this._maxRecordCount=i,this._maxTotalRecordCount=c,this._maxPageCount=w,this._objectIdField=d,this._spatialReference=h;let l=await this._snapshotFeatures(t);if(l.errors.length>0&&(this._supportsPagination=!1,l=await this._snapshotFeatures(t),l.errors.length>0))throw l.errors[0];const T={type:"object-id",fieldName:d};return this._queryEngine=new M({fieldsIndex:this._fieldsIndex,geometryType:u,hasM:!1,hasZ:!1,featureIdInfo:T,spatialReference:h,timeInfo:null,featureStore:new O({geometryType:u,hasM:!1,hasZ:!1})}),this._queryEngine.featureStore.addMany(l.features),{warnings:C(l),extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new y("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),(await this._queryEngine.executeQueryForIds(e,t.signal)).filter(P)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),Q(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){return this._customParameters=e.customParameters,this._maxRecordCount=e.maxRecordCount,this._maxTotalRecordCount=e.maxTotalRecordCount,this._maxPageCount=e.maxPageCount,this._snapshotTask?.abort(),this._snapshotTask=I(t=>this._snapshotFeatures({signal:t})),this._snapshotTask.promise.then(t=>{this._queryEngine.featureStore.clear(),this._queryEngine.featureStore.addMany(t.features);for(const a of C(t))_.getLogger(x).warn(new g("wfs-layer:refresh-warning",a.message,a.details));t.errors?.length&&_.getLogger(x).warn(new g("wfs-layer:refresh-error","Refresh completed with errors",{errors:t.errors}))},()=>{this._queryEngine.featureStore.clear()}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _snapshotFeatures(e){const t=e?.signal,a=this._maxTotalRecordCount,s=this._maxPageCount,n=this._supportsPagination&&s>1?await J(this._getFeatureUrl,this._featureType.typeName,{customParameters:this._customParameters,signal:t}):void 0;let u=[];const o=[];if(n==null)try{u=await this._singleQuery(t)}catch(i){R(i)||o.push(i)}else{const i=Math.min(n,a),c=B(this,b(Math.ceil(i/this._maxRecordCount),1,s),t);await Promise.allSettled(Array.from({length:10}).map(()=>G(c,u,o)))}return p(t),{features:u,totalRecordCount:n,maxTotalRecordCount:a,maxPageCount:s,errors:o}}async _singleQuery(e){const t=Number.isFinite(this._maxRecordCount)&&this._maxRecordCount>0?this._maxRecordCount:void 0,a=await f(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,count:t,signal:e});return this._processGeoJSON(a,{signal:e})}async _pageQuery(e,t){const a=e*this._maxRecordCount,s=await f(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,startIndex:a,count:this._maxRecordCount,signal:t});return this._processGeoJSON(s,{startIndex:a,signal:t})}_processGeoJSON(e,t){A(e,this._getFeatureSpatialReference.wkid);const{startIndex:a,signal:s}=t;p(s);const n=U(e,{geometryType:this._geometryType,hasZ:!1,objectIdField:this._objectIdField});if(!$(this._spatialReference,this._getFeatureSpatialReference))for(const o of n)o.geometry!=null&&(o.geometry=j(L(N(o.geometry,this._geometryType,!1,!1),this._getFeatureSpatialReference,this._spatialReference)));let u=a??1;for(const o of n){const i={};Z(this._fieldsIndex,i,o.attributes,!0),o.attributes=i,i[this._objectIdField]==null&&(o.objectId=i[this._objectIdField]=u++)}return n}}function*B(r,e,t){for(let a=0;a<e;a++)yield r._pageQuery(a,t)}async function G(r,e,t){let a=r.next();for(;!a.done;){try{const s=await a.value;e.push(...s)}catch(s){R(s)||t.push(s)}a=r.next()}}function C(r){const e=[];return r.totalRecordCount!=null&&(r.features.length<r.totalRecordCount&&e.push({name:"wfs-layer:maxRecordCount-too-low",message:`Could only fetch ${r.features.length} of ${r.totalRecordCount} in ${r.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount}}),r.totalRecordCount>r.maxTotalRecordCount&&e.push({name:"wfs-layer:large-dataset",message:`The number of ${r.totalRecordCount} features exceeds the maximum allowed of ${r.maxTotalRecordCount}.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount,maxTotalRecordCount:r.maxTotalRecordCount}})),e}export{wt as default};
