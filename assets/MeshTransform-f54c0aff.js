import{es as q,du as M,et as z,eu as B,ev as I,ea as k,r as s,m as i,a as C,l as D,aE as E,ew as F,b1 as G,cW as u,ex as H,ey as P,ez as T}from"./index-8ee34b61.js";import{e as A}from"./mat4f64-a3dc1405.js";import{v as N,b as h,x as U}from"./quat-3ef9ebee.js";import{e as f}from"./quatf64-216ddd5a.js";import{s as W}from"./vec32-37618b70.js";function e(o=j){return[o[0],o[1],o[2],o[3]]}function p(o,t,n=e()){return W(n,o),n[3]=t,n}function S(o,t=e()){const n=q(a,o);return w(t,M(N(t,n))),t}function $(o,t,n=e()){return h(a,o,m(o)),h(b,t,m(t)),U(a,b,a),w(n,M(N(n,a)))}function V(o,t,n,y=e()){return p(z,o,c),p(B,t,g),p(I,n,d),$(c,g,c),$(c,d,y),y}function X(o){return o}function J(o){return o[3]}function m(o){return k(o[3])}function w(o,t){return o[3]=t,o}const j=[0,0,1,0],a=f(),b=f();e();const c=e(),g=e(),d=e();var x,l;let r=(l=class extends D{constructor(t){super(t),this.translation=E(),this.rotationAxis=F(j),this.rotationAngle=0,this.scale=G(1,1,1)}get rotation(){return p(this.rotationAxis,this.rotationAngle)}set rotation(t){this.rotationAxis=u(t),this.rotationAngle=J(t)}get localMatrix(){const t=A();return h(v,this.rotation,m(this.rotation)),H(t,v,this.translation,this.scale),t}get localMatrixInverse(){return P(A(),this.localMatrix)}equals(t){return this===t||t!=null&&T(this.localMatrix,t.localMatrix)}clone(){const t={translation:u(this.translation),rotationAxis:u(this.rotationAxis),rotationAngle:this.rotationAngle,scale:u(this.scale)};return new x(t)}},x=l,l);s([i({type:[Number],nonNullable:!0,json:{write:!0}})],r.prototype,"translation",void 0),s([i({type:[Number],nonNullable:!0,json:{write:!0}})],r.prototype,"rotationAxis",void 0),s([i({type:Number,nonNullable:!0,json:{write:!0}})],r.prototype,"rotationAngle",void 0),s([i({type:[Number],nonNullable:!0,json:{write:!0}})],r.prototype,"scale",void 0),s([i()],r.prototype,"rotation",null),s([i()],r.prototype,"localMatrix",null),s([i()],r.prototype,"localMatrixInverse",null),r=x=s([C("esri.geometry.support.MeshTransform")],r);const v=f();export{r as A,V as d,e as j,S as k,X as w,m as z};
