import{da as T,de as D,db as _,dq as S,dc as L,dd as v,df as A,dr as k,aM as c,ac as N,cu as I,a6 as C,p as d,dx as p,dy as E,am as y,bY as m,dt as G,dz as $,dA as M,dB as R,r as o,m as r,Z as x,d as O,di as U,a as K,R as F,V as j,dp as z}from"./index-f00bd99f.js";import{I as u,i as g,E as P,m as H,h as V}from"./KnowledgeGraphSublayer-009ccf4f.js";import{u as B}from"./knowledgeGraphService-604d3552.js";import"./OptimizedFeature-a0a9dac6.js";import"./memoryEstimations-368c31a0.js";import"./featureConversionUtils-f7ab006d.js";import"./OptimizedFeatureSet-5dc8ee29.js";import"./GraphicsLayer-77f47b18.js";import"./GraphQueryStreaming-168a6503.js";import"./FeatureStore-41b79be2.js";import"./BoundsStore-8fb9ad0b.js";import"./PooledRBush-859ea7f2.js";import"./quickselect-b7b34c34.js";import"./QueryEngine-6723a34b.js";import"./WhereClauseCache-89a3b7dc.js";import"./WhereClause-6167c62b.js";import"./FixedIntervalBinParameters-c92437fc.js";import"./normalizeUtils-e6e5ded6.js";import"./normalizeUtilsCommon-3a54feae.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-4b2bc619.js";import"./quantizationUtils-4020db87.js";import"./utils-9fa0ff83.js";import"./utils-2cad792c.js";import"./utils-7142f869.js";import"./ClassBreaksDefinition-2050dd64.js";import"./signal-f297c7bf.js";import"./optimizedFeatureQueryEngineAdapter-e87cd9e9.js";import"./clientSideDefaults-c074d183.js";import"./utils-b811360b.js";import"./GPMessage-1d5cd9af.js";let n=class extends T(D(_(S(L(v(A(k(z)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(c.ofType(u)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(c.ofType(u)),this.type="knowledge-graph",this.url=null,this.addHandles(N(()=>this.layers.concat(this.tables),(i,t)=>this._handleSublayersChange(i,t),I))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){C(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await g(this)}async _fetchMetadata(){if(!this.url)throw new d("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await B(this.url);this.knowledgeGraph=e,this._forEachGraphType(i=>{i.name&&this._graphTypeLookup.set(i.name,i)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===p.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new P({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await H(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,E(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))});else if(!e.generateAllSublayers)throw new d("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach((s,l)=>{const h=this._graphTypeLookup.get(l);switch(h?.type){case"relationship":i.push(h);break;case"entity":e.push(h)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(i=>{e(i)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some(s=>s.objectType.name===a.typeName)===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),m(this.sublayerIdsCache,a.typeName,()=>new Set).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await g(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach(a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach(t=>{t.parentCompositeLayer=this;const a=e.find(s=>s.type===t.graphType&&s.name===t.graphTypeName);a&&(t.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(Y(this.inclusionModeDefinition).then(s=>{const l=q(a);e[i]=l.itemRelativeUrl,t.toAdd.push({resource:l,content:{type:"blob",blob:s},compress:!1,finish:h=>{this.definitionSetMap=h.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach(t=>{t.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(t=>{t.parent=this}),this.addHandles([e.on("after-add",({item:t})=>{t.parent=this}),e.on("after-remove",({item:t})=>{t.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=p.PORTAL_ITEM&&e<p.USER}readDefinitionSetMap(e,i,t){return G(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,l=a?.resources,h=$(a?.origin);if(!s||!l||h==null)return void(e&&(i[t]=M(e,a)));const{inclusionModeDefinition:w}=this;if(!w||this._displaysAllRecords(w))return void(this.definitionSetMap=null);const f=this.originIdOf("inclusionModeDefinition");if(f===p.USER||this._namedTypesModified||h<f)this._saveUrlAsNewResource(i,t,l,s);else if(h===f&&e){const b=M(e,a);R(b)?this._saveUrlAsNewResource(i,t,l,s):i[t]=b}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):y.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===p.DEFAULTS?this.originIdOf("layers")===p.DEFAULTS?this._createSublayers(e,this.layers,i=>!!i.geometryType):this._updateSublayers(e,this.layers):this.layers=new c,this.tables.length||this.originIdOf("layers")===p.DEFAULTS?this.originIdOf("tables")===p.DEFAULTS?this._createSublayers(e,this.tables,i=>!i.geometryType):this._updateSublayers(e,this.tables):this.tables=new c,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((i,t)=>{const a=m(this.sublayerIdsCache,t,()=>new Set);i.members?.forEach(s=>{a.add(s.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new d("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new d("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),m(this.sublayerIdsCache,e,()=>new Set);const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await g(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new d("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new d("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new d("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?y.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new d("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new d("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new d("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||y.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())m(this.sublayerIdsCache,e,()=>new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};o([r()],n.prototype,"dataManager",void 0),o([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],n.prototype,"definitionSetMap",void 0),o([x("definitionSetMap")],n.prototype,"readDefinitionSetMap",null),o([O("definitionSetMap")],n.prototype,"writeDefinitionSetMap",null),o([r()],n.prototype,"inclusionModeDefinition",null),o([r()],n.prototype,"knowledgeGraph",void 0),o([r({type:c.ofType(u),json:{write:{ignoreOrigin:!0}}})],n.prototype,"layers",void 0),o([r()],n.prototype,"memberEntityTypes",void 0),o([r()],n.prototype,"memberRelationshipTypes",void 0),o([r({type:["KnowledgeGraphLayer"]})],n.prototype,"operationalLayerType",void 0),o([r()],n.prototype,"sublayerIdsCache",void 0),o([r({type:c.ofType(u),json:{write:{ignoreOrigin:!0}}})],n.prototype,"tables",void 0),o([r({json:{read:!1}})],n.prototype,"type",void 0),o([r(U)],n.prototype,"url",void 0),n=o([K("esri.layers.KnowledgeGraphLayer")],n);const ve=n;async function Y(e){const i=await V(e);return new Blob([i],{type:"application/x-protobuf"})}function q(e){const i=`definitionSetMap-${F()}.dat`,t=j("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{ve as default};
