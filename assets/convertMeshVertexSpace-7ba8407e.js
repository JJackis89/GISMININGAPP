import{T as m,p as s,aD as p}from"./index-f00bd99f.js";import{p as n}from"./MeshVertexAttributes-e999462a.js";import{B as a}from"./vertexSpaceConversion-a07cc897.js";import"./mat3-cd249fcd.js";import"./mat3f64-d34bdb1e.js";import"./mat4f64-a3dc1405.js";import"./vec32-6757f7c3.js";import"./spatialReferenceEllipsoidUtils-eb97be5b.js";import"./computeTranslationToOriginAndRotation-40e271f0.js";import"./projectPointToVector-f08559a6.js";import"./meshVertexSpaceUtils-6c020a89.js";import"./MeshLocalVertexSpace-9667e66a.js";import"./vec3-e56e83e4.js";import"./BufferView-920eb48c.js";import"./vec2-c0ea4c96.js";import"./vec2f64-44b9a02c.js";import"./vec4-e2b13c9c.js";async function j(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{j as convertMeshVertexSpace};
