import{_ as y,dU as m,L as _}from"./index-f00bd99f.js";import{s as v,u as x,i as g,c as G}from"./operatorGeodesicBuffer-e621580f.js";import{e as l}from"./geodeticCurveType-07cde097.js";import"./SimpleGeometryCursor-e3941f41.js";let c,d,f;function N(){return!!c&&v()}async function E(){if(!N()){const[t]=await Promise.all([y(()=>import("./jsonConverter-77f04cbc.js"),["assets/jsonConverter-77f04cbc.js","assets/Point2D-e62ad2de.js","assets/ProjectionTransformation-a3dffea2.js","assets/Envelope2D-4833fda6.js","assets/Transformation2D-ab2ac5ee.js","assets/SimpleGeometryCursor-e3941f41.js","assets/index-f00bd99f.js","assets/index-a5714ce2.css","assets/OperatorDefinitions-181ceaf8.js"]),x()]);c=t.fromGeometries,d=t.fromGeometry,f=t.toGeometry}}function R(t,o,n={}){let{curveType:s="geodesic",maxDeviation:e=NaN,unit:a}=n;a&&(o=m(o,a,"meters"),e&&(e=m(e,a,"meters")));const r=d(t),i=r.getSpatialReference();return f(g(r.getGeometry(),i,l[s],o,e),i)}function $(t,o,n={}){let{curveType:s="geodesic",maxDeviation:e=NaN,union:a=!1,unit:r}=n;r&&(o=o.map(u=>m(u,r,"meters")),e&&(e=m(e,r,"meters")));const[i,p]=c(t);return G(i,p,l[s],o,e,a).map(u=>f(u,p)).filter(_)}export{R as execute,$ as executeMany,N as isLoaded,E as load};
