import{o as _t}from"./vec2-c0ea4c96.js";import{o as te}from"./vec32-6757f7c3.js";import{aT as ee}from"./index-f00bd99f.js";import"./vec2f64-44b9a02c.js";let Kt=globalThis.Float16Array;function rt(){return Kt}let it=!!Kt;var E;let Qt=(E=class{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.elementCount=9;const i=this.TypedArrayConstructor;s===void 0&&(s=9*i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride),this.stride=this.typedBufferStride*this.TypedArrayConstructor.BYTES_PER_ELEMENT}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}getMat(t,e){let r=t*this.typedBufferStride;for(let s=0;s<9;s++)e[s]=this.typedBuffer[r++];return e}setMat(t,e){let r=t*this.typedBufferStride;for(let s=0;s<9;s++)this.typedBuffer[r++]=e[s]}get(t,e){return this.typedBuffer[t*this.typedBufferStride+e]}set(t,e,r){this.typedBuffer[t*this.typedBufferStride+e]=r}copyFrom(t,e,r){const s=this.typedBuffer,f=e.typedBuffer;let i=t*this.typedBufferStride,u=r*e.typedBufferStride;for(let y=0;y<9;++y)s[i++]=f[u++]}get buffer(){return this.typedBuffer.buffer}},E.ElementCount=9,E);var T;let Wt=(T=class{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.elementCount=16;const i=this.TypedArrayConstructor;s===void 0&&(s=16*i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride),this.stride=this.typedBufferStride*this.TypedArrayConstructor.BYTES_PER_ELEMENT}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}getMat(t,e){let r=t*this.typedBufferStride;for(let s=0;s<16;s++)e[s]=this.typedBuffer[r++];return e}setMat(t,e){let r=t*this.typedBufferStride;for(let s=0;s<16;s++)this.typedBuffer[r++]=e[s]}get(t,e){return this.typedBuffer[t*this.typedBufferStride+e]}set(t,e,r){this.typedBuffer[t*this.typedBufferStride+e]=r}copyFrom(t,e,r){this.copyFromTypedBuffer(t,e.typedBuffer,r*e.typedBufferStride)}copyFromTypedBuffer(t,e,r){const s=this.typedBuffer;let f=t*this.typedBufferStride;for(let i=0;i<16;++i)s[f++]=e[r++]}get buffer(){return this.typedBuffer.buffer}},T.ElementCount=16,T);const ut=class ut{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.elementCount=1;const i=this.TypedArrayConstructor;s===void 0&&(s=i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.stride=s,this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride)}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}get(t){return this.typedBuffer[t*this.typedBufferStride]}set(t,e){this.typedBuffer[t*this.typedBufferStride]=e}get buffer(){return this.typedBuffer.buffer}};ut.ElementCount=1;let n=ut;var m;let l=(m=class{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.start=r,this.elementCount=2;const i=this.TypedArrayConstructor;s===void 0&&(s=2*i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride),this.stride=this.typedBufferStride*this.TypedArrayConstructor.BYTES_PER_ELEMENT}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}getVec(t,e){return t*=this.typedBufferStride,_t(e,this.typedBuffer[t],this.typedBuffer[t+1])}setVec(t,e){t*=this.typedBufferStride,this.typedBuffer[t++]=e[0],this.typedBuffer[t]=e[1]}get(t,e){return this.typedBuffer[t*this.typedBufferStride+e]}set(t,e,r){this.typedBuffer[t*this.typedBufferStride+e]=r}setValues(t,e,r){t*=this.typedBufferStride,this.typedBuffer[t++]=e,this.typedBuffer[t]=r}copyFrom(t,e,r){const s=this.typedBuffer,f=e.typedBuffer;let i=t*this.typedBufferStride,u=r*e.typedBufferStride;s[i++]=f[u++],s[i]=f[u]}get buffer(){return this.typedBuffer.buffer}},m.ElementCount=2,m);var S;let p=(S=class{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.elementCount=3;const i=this.TypedArrayConstructor;s===void 0&&(s=3*i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride),this.stride=this.typedBufferStride*this.TypedArrayConstructor.BYTES_PER_ELEMENT}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}getVec(t,e){return t*=this.typedBufferStride,te(e,this.typedBuffer[t],this.typedBuffer[t+1],this.typedBuffer[t+2])}setVec(t,e){t*=this.typedBufferStride,this.typedBuffer[t++]=e[0],this.typedBuffer[t++]=e[1],this.typedBuffer[t]=e[2]}get(t,e){return this.typedBuffer[t*this.typedBufferStride+e]}set(t,e,r){this.typedBuffer[t*this.typedBufferStride+e]=r}setValues(t,e,r,s){t*=this.typedBufferStride,this.typedBuffer[t++]=e,this.typedBuffer[t++]=r,this.typedBuffer[t]=s}copyFrom(t,e,r){const s=this.typedBuffer,f=e.typedBuffer;let i=t*this.typedBufferStride,u=r*e.typedBufferStride;s[i++]=f[u++],s[i++]=f[u++],s[i]=f[u]}get buffer(){return this.typedBuffer.buffer}},S.ElementCount=3,S);const nt=class nt{constructor(t,e,r=0,s,f){this.TypedArrayConstructor=t,this.start=r,this.elementCount=4;const i=this.TypedArrayConstructor;s===void 0&&(s=4*i.BYTES_PER_ELEMENT);const u=e.byteLength===0?0:r;this.typedBuffer=f==null?new i(e,u):new i(e,u,(f-r)/i.BYTES_PER_ELEMENT),this.typedBufferStride=s/i.BYTES_PER_ELEMENT,this.count=Math.ceil(this.typedBuffer.length/this.typedBufferStride),this.stride=this.typedBufferStride*this.TypedArrayConstructor.BYTES_PER_ELEMENT}sliceBuffer(t,e,r=this.count-e){const s=this.typedBuffer.byteOffset+e*this.stride;return new t(this.buffer,s,this.stride,s+r*this.stride)}getVec(t,e){return t*=this.typedBufferStride,ee(e,this.typedBuffer[t++],this.typedBuffer[t++],this.typedBuffer[t++],this.typedBuffer[t])}setVec(t,e){t*=this.typedBufferStride,this.typedBuffer[t++]=e[0],this.typedBuffer[t++]=e[1],this.typedBuffer[t++]=e[2],this.typedBuffer[t]=e[3]}get(t,e){return this.typedBuffer[t*this.typedBufferStride+e]}set(t,e,r){this.typedBuffer[t*this.typedBufferStride+e]=r}setValues(t,e,r,s,f){t*=this.typedBufferStride,this.typedBuffer[t++]=e,this.typedBuffer[t++]=r,this.typedBuffer[t++]=s,this.typedBuffer[t]=f}copyFrom(t,e,r){const s=this.typedBuffer,f=e.typedBuffer;let i=t*this.typedBufferStride,u=r*e.typedBufferStride;s[i++]=f[u++],s[i++]=f[u++],s[i++]=f[u++],s[i]=f[u]}get buffer(){return this.typedBuffer.buffer}};nt.ElementCount=4;let c=nt,se=class{constructor(t){this.message=t}toString(){return`AssertException: ${this.message}`}};function ft(h,t="Assertion"){if(!h){const e=new Error(t).stack;throw new se(`${t} at ${e}`)}}function ce(h,t,e,r){let s,f=(e[0]-h[0])/t[0],i=(r[0]-h[0])/t[0];f>i&&(s=f,f=i,i=s);let u=(e[1]-h[1])/t[1],y=(r[1]-h[1])/t[1];if(u>y&&(s=u,u=y,y=s),f>y||u>i)return!1;u>f&&(f=u),y<i&&(i=y);let A=(e[2]-h[2])/t[2],d=(r[2]-h[2])/t[2];return A>d&&(s=A,A=d,d=s),!(f>d||A>i)&&(d<i&&(i=d),!(i<0))}const ct=class ct extends n{constructor(t,e=0,r,s){ft(it),super(rt(),t,e,r,s),this.elementType="f16"}};ct.ElementType="f16";let yt=ct;const ht=class ht extends n{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}};ht.ElementType="f32";let lt=ht;const b=class b extends l{constructor(t,e=0,r,s){ft(it),super(rt(),t,e,r,s),this.elementType="f16"}slice(t,e){return this.sliceBuffer(b,t,e)}};b.ElementType="f16";let pt=b;const x=class x extends l{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}slice(t,e){return this.sliceBuffer(x,t,e)}};x.ElementType="f32";let dt=x;const g=class g extends p{constructor(t,e=0,r,s){ft(it),super(rt(),t,e,r,s),this.elementType="f16"}slice(t,e){return this.sliceBuffer(g,t,e)}};g.ElementType="f16";let ot=g;const o=class o extends p{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}slice(t,e){return this.sliceBuffer(o,t,e)}static fromTypedArray(t,e){return new o(t.buffer,t.byteOffset,e,t.byteOffset+t.byteLength)}};o.ElementType="f32";let Bt=o;const M=class M extends c{constructor(t,e=0,r,s){ft(it),super(rt(),t,e,r,s),this.elementType="f16"}slice(t,e){return this.sliceBuffer(M,t,e)}};M.ElementType="f16";let at=M;const L=class L extends c{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}slice(t,e){return this.sliceBuffer(L,t,e)}};L.ElementType="f32";let Et=L;const C=class C extends Qt{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}slice(t,e){return this.sliceBuffer(C,t,e)}};C.ElementType="f32";let Tt=C;const Y=class Y extends Qt{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(Y,t,e)}};Y.ElementType="f64";let mt=Y;const w=class w extends Wt{constructor(t,e=0,r,s){super(Float32Array,t,e,r,s),this.elementType="f32"}slice(t,e){return this.sliceBuffer(w,t,e)}};w.ElementType="f32";let St=w;const N=class N extends Wt{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(N,t,e)}};N.ElementType="f64";let At=N;const P=class P extends n{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(P,t,e)}};P.ElementType="f64";let bt=P;const R=class R extends l{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(R,t,e)}};R.ElementType="f64";let xt=R;const B=class B extends p{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(B,t,e)}static fromTypedArray(t,e){return new B(t.buffer,t.byteOffset,e,t.byteOffset+t.byteLength)}};B.ElementType="f64";let gt=B;const F=class F extends c{constructor(t,e=0,r,s){super(Float64Array,t,e,r,s),this.elementType="f64"}slice(t,e){return this.sliceBuffer(F,t,e)}};F.ElementType="f64";let Mt=F;const $=class $ extends n{constructor(t,e=0,r,s){super(Uint8Array,t,e,r,s),this.elementType="u8"}slice(t,e){return this.sliceBuffer($,t,e)}};$.ElementType="u8";let Lt=$;const I=class I extends l{constructor(t,e=0,r,s){super(Uint8Array,t,e,r,s),this.elementType="u8"}slice(t,e){return this.sliceBuffer(I,t,e)}};I.ElementType="u8";let Ct=I;const a=class a extends p{constructor(t,e=0,r,s){super(Uint8Array,t,e,r,s),this.elementType="u8"}slice(t,e){return this.sliceBuffer(a,t,e)}static fromTypedArray(t,e){return new a(t.buffer,t.byteOffset,e,t.byteOffset+t.byteLength)}};a.ElementType="u8";let Yt=a;const O=class O extends c{constructor(t,e=0,r,s){super(Uint8Array,t,e,r,s),this.elementType="u8"}slice(t,e){return this.sliceBuffer(O,t,e)}};O.ElementType="u8";let wt=O;const U=class U extends n{constructor(t,e=0,r,s){super(Uint16Array,t,e,r,s),this.elementType="u16"}slice(t,e){return this.sliceBuffer(U,t,e)}};U.ElementType="u16";let Nt=U;const V=class V extends l{constructor(t,e=0,r,s){super(Uint16Array,t,e,r,s),this.elementType="u16"}slice(t,e){return this.sliceBuffer(V,t,e)}};V.ElementType="u16";let Pt=V;const v=class v extends p{constructor(t,e=0,r,s){super(Uint16Array,t,e,r,s),this.elementType="u16"}slice(t,e){return this.sliceBuffer(v,t,e)}};v.ElementType="u16";let Rt=v;const X=class X extends c{constructor(t,e=0,r,s){super(Uint16Array,t,e,r,s),this.elementType="u16"}slice(t,e){return this.sliceBuffer(X,t,e)}};X.ElementType="u16";let Ft=X;const Z=class Z extends n{constructor(t,e=0,r,s){super(Uint32Array,t,e,r,s),this.elementType="u32"}slice(t,e){return this.sliceBuffer(Z,t,e)}};Z.ElementType="u32";let $t=Z;const k=class k extends l{constructor(t,e=0,r,s){super(Uint32Array,t,e,r,s),this.elementType="u32"}slice(t,e){return this.sliceBuffer(k,t,e)}};k.ElementType="u32";let It=k;const j=class j extends p{constructor(t,e=0,r,s){super(Uint32Array,t,e,r,s),this.elementType="u32"}slice(t,e){return this.sliceBuffer(j,t,e)}};j.ElementType="u32";let Ot=j;const q=class q extends c{constructor(t,e=0,r,s){super(Uint32Array,t,e,r,s),this.elementType="u32"}slice(t,e){return this.sliceBuffer(q,t,e)}};q.ElementType="u32";let Ut=q;const z=class z extends n{constructor(t,e=0,r,s){super(Int8Array,t,e,r,s),this.elementType="i8"}slice(t,e){return this.sliceBuffer(z,t,e)}};z.ElementType="i8";let Vt=z;const D=class D extends l{constructor(t,e=0,r,s){super(Int8Array,t,e,r,s),this.elementType="i8"}slice(t,e){return this.sliceBuffer(D,t,e)}};D.ElementType="i8";let vt=D;const G=class G extends p{constructor(t,e=0,r,s){super(Int8Array,t,e,r,s),this.elementType="i8"}slice(t,e){return this.sliceBuffer(G,t,e)}};G.ElementType="i8";let Xt=G;const H=class H extends c{constructor(t,e=0,r,s){super(Int8Array,t,e,r,s),this.elementType="i8"}slice(t,e){return this.sliceBuffer(H,t,e)}};H.ElementType="i8";let Zt=H;const J=class J extends n{constructor(t,e=0,r,s){super(Int16Array,t,e,r,s),this.elementType="i16"}slice(t,e){return this.sliceBuffer(J,t,e)}};J.ElementType="i16";let kt=J;const K=class K extends l{constructor(t,e=0,r,s){super(Int16Array,t,e,r,s),this.elementType="i16"}slice(t,e){return this.sliceBuffer(K,t,e)}};K.ElementType="i16";let jt=K;const Q=class Q extends p{constructor(t,e=0,r,s){super(Int16Array,t,e,r,s),this.elementType="i16"}slice(t,e){return this.sliceBuffer(Q,t,e)}};Q.ElementType="i16";let qt=Q;const W=class W extends c{constructor(t,e=0,r,s){super(Int16Array,t,e,r,s),this.elementType="i16"}slice(t,e){return this.sliceBuffer(W,t,e)}};W.ElementType="i16";let zt=W;const _=class _ extends n{constructor(t,e=0,r,s){super(Int32Array,t,e,r,s),this.elementType="i32"}slice(t,e){return this.sliceBuffer(_,t,e)}};_.ElementType="i32";let Dt=_;const tt=class tt extends l{constructor(t,e=0,r,s){super(Int32Array,t,e,r,s),this.elementType="i32"}slice(t,e){return this.sliceBuffer(tt,t,e)}};tt.ElementType="i32";let Gt=tt;const et=class et extends p{constructor(t,e=0,r,s){super(Int32Array,t,e,r,s),this.elementType="i32"}slice(t,e){return this.sliceBuffer(et,t,e)}};et.ElementType="i32";let Ht=et;const st=class st extends c{constructor(t,e=0,r,s){super(Int32Array,t,e,r,s),this.elementType="i32"}slice(t,e){return this.sliceBuffer(st,t,e)}};st.ElementType="i32";let Jt=st;export{At as A,bt as B,vt as C,Xt as D,St as E,Mt as F,Zt as G,kt as H,Lt as I,jt as J,qt as K,Pt as L,Ft as M,zt as N,Yt as O,Dt as P,Gt as Q,Ht as R,It as S,Et as T,gt as U,Rt as V,Jt as W,yt as a,xt as b,Tt as d,lt as f,wt as g,ot as h,ce as i,Ct as j,Ot as k,rt as l,at as m,Bt as o,pt as p,Ut as q,it as r,ft as s,$t as v,Nt as w,mt as x,dt as y,Vt as z};
