import React, { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { concessionEditingService } from '../services/concessionEditingService'
import { miningDataService } from '../services/miningDataService'
import { MiningConcession } from '../types'
import ConcessionForm from '../components/Editing/ConcessionForm'
import DataSourceDebug from '../components/Debug/DataSourceDebug'
import DataLoadingTest from '../components/Debug/DataLoadingTest'
import DirectArcGISTest from '../components/Debug/DirectArcGISTest'
import { 
  Plus, 
  Edit3, 
  Trash2, 
  Search, 
  Filter, 
  FileDown, 
  Eye,
  AlertTriangle,
  RotateCcw,
  Clock,
  CheckCircle2,
  XCircle,
  MapPin,
  Building
} from 'lucide-react'

export default function ConcessionEdit() {
  const { user, hasPermission } = useAuth()
  const [concessions, setConcessions] = useState<MiningConcession[]>([])
  const [filteredConcessions, setFilteredConcessions] = useState<MiningConcession[]>([])
  const [loading, setLoading] = useState(true)
  const [showForm, setShowForm] = useState(false)
  const [editingConcession, setEditingConcession] = useState<MiningConcession | undefined>()
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [regionFilter, setRegionFilter] = useState<string>('all')
  const [editingHistory, setEditingHistory] = useState<any[]>([])
  const [showHistory, setShowHistory] = useState(false)
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null)
  const [hostedLayerEditable, setHostedLayerEditable] = useState<boolean | null>(null)

  const canEdit = hasPermission('canEditConcessions')
  const canDelete = hasPermission('canDeleteConcessions')

  // Load concessions data
  useEffect(() => {
    // Add a timeout to prevent infinite loading
    const loadTimer = setTimeout(() => {
      if (loading) {
        console.warn('⚠️ Loading timeout - forcing completion')
        setLoading(false)
      }
    }, 30000) // 30 second timeout

    loadConcessions()
    loadEditingHistory()

    return () => clearTimeout(loadTimer)
  }, [])

  // Filter concessions based on search and filters
  useEffect(() => {
    let filtered = concessions

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(concession =>
        concession.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        concession.owner.toLowerCase().includes(searchTerm.toLowerCase()) ||
        concession.district.toLowerCase().includes(searchTerm.toLowerCase()) ||
        concession.region.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(concession => concession.status === statusFilter)
    }

    // Region filter
    if (regionFilter !== 'all') {
      filtered = filtered.filter(concession => concession.region === regionFilter)
    }

    setFilteredConcessions(filtered)
  }, [concessions, searchTerm, statusFilter, regionFilter])

  const loadConcessions = async (forceRefresh: boolean = false) => {
    try {
      setLoading(true)
      
      if (forceRefresh) {
        console.log('🔄 Force refresh: clearing all caches...')
        // Clear both service caches
        miningDataService.clearCache()
        concessionEditingService.clearCache()
      }
      
      // First, initialize the mining data service to get hosted layer data
      console.log('🔄 Loading hosted layer data for editing...')
      await miningDataService.initialize()
      
      console.log('🔄 Fetching concessions from hosted layer...')
      const hostedLayerData = await miningDataService.getMiningConcessions(forceRefresh)
      
      console.log(`✅ Loaded ${hostedLayerData.length} concessions from hosted layer`)
      
      if (hostedLayerData.length === 0) {
        console.warn('⚠️ No concessions found in hosted layer - this might indicate a data loading issue')
      }
      
      // Initialize the editing service with hosted layer data
      console.log('🔄 Initializing editing service...')
      concessionEditingService.initialize(hostedLayerData)
      
      // Check if hosted layer supports editing
      console.log('🔄 Checking hosted layer editing capabilities...')
      const canEditHosted = await concessionEditingService.canEditHostedLayer()
      setHostedLayerEditable(canEditHosted)
      console.log(`🔧 Hosted layer editing support: ${canEditHosted ? 'YES' : 'NO'}`)
      
      // Get all concessions (which now includes hosted layer data + any local edits)
      console.log('🔄 Getting all concessions from editing service...')
      const allConcessions = await concessionEditingService.getAllConcessions()
      setConcessions(allConcessions)
      
      console.log(`📝 Total concessions available for editing: ${allConcessions.length}`)
      
      if (allConcessions.length !== hostedLayerData.length) {
        console.warn(`⚠️ Concession count mismatch: ${hostedLayerData.length} from hosted layer, ${allConcessions.length} in editing service`)
      }
      
    } catch (error) {
      console.error('❌ Failed to load concessions:', error)
      // Fallback to just editing service data if hosted layer fails
      try {
        console.log('🔄 Attempting fallback to editing service data...')
        const fallbackConcessions = await concessionEditingService.getAllConcessions()
        setConcessions(fallbackConcessions)
        console.log(`⚠️ Using fallback data: ${fallbackConcessions.length} concessions`)
      } catch (fallbackError) {
        console.error('❌ Fallback loading also failed:', fallbackError)
        setConcessions([]) // Set empty array as last resort
      }
    } finally {
      setLoading(false)
    }
  }

  const loadEditingHistory = async () => {
    try {
      const history = await concessionEditingService.getEditingHistory()
      setEditingHistory(history)
    } catch (error) {
      console.error('Failed to load editing history:', error)
    }
  }

  const handleSyncPendingChanges = async () => {
    try {
      setLoading(true)
      const result = await concessionEditingService.syncPendingChanges()
      if (result.success) {
        console.log(`✅ Successfully synced ${result.synced} changes`)
        // Reload data to reflect any changes
        await loadConcessions()
        await loadEditingHistory()
      } else {
        console.warn(`⚠️ Sync completed with issues: ${result.synced} synced, ${result.failed} failed`)
      }
    } catch (error) {
      console.error('Failed to sync pending changes:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleForceReset = async () => {
    console.log('🔄 FORCE RESET: Clearing everything...')
    
    // Clear all caches and data
    localStorage.clear()
    miningDataService.clearCache()
    concessionEditingService.clearCache()
    
    // Reset state
    setConcessions([])
    setFilteredConcessions([])
    setEditingHistory([])
    setHostedLayerEditable(null)
    
    // Force reload
    window.location.reload()
  }
    try {
      setLoading(true)
      const result = await concessionEditingService.syncPendingChanges()
      if (result.success) {
        console.log(`✅ Successfully synced ${result.synced} changes`)
        // Reload data to reflect any changes
        await loadConcessions()
        await loadEditingHistory()
      } else {
        console.warn(`⚠️ Sync completed with issues: ${result.synced} synced, ${result.failed} failed`)
      }
    } catch (error) {
      console.error('Failed to sync pending changes:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingConcession(undefined)
    setShowForm(true)
  }

  const handleEdit = (concession: MiningConcession) => {
    setEditingConcession(concession)
    setShowForm(true)
  }

  const handleDelete = async (id: string) => {
    if (!canDelete) return

    try {
      const result = await concessionEditingService.deleteConcession(id, user?.id || 'unknown')
      if (result.success) {
        await loadConcessions()
        await loadEditingHistory()
        setDeleteConfirm(null)
      }
    } catch (error) {
      console.error('Failed to delete concession:', error)
    }
  }

  const handleFormSave = async (concession: MiningConcession) => {
    await loadConcessions()
    await loadEditingHistory()
    setShowForm(false)
    setEditingConcession(undefined)
  }

  const handleFormClose = () => {
    setShowForm(false)
    setEditingConcession(undefined)
  }

  const exportToCSV = () => {
    const headers = ['Name', 'Owner', 'Size (ha)', 'Type', 'Status', 'Region', 'District', 'Expiry Date']
    const csvContent = [
      headers.join(','),
      ...filteredConcessions.map(c => [
        `"${c.name}"`,
        `"${c.owner}"`,
        c.size,
        c.permitType,
        c.status,
        c.region,
        c.district,
        c.permitExpiryDate
      ].join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `mining-concessions-${new Date().toISOString().split('T')[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <CheckCircle2 className="w-4 h-4 text-green-600" />
      case 'pending':
        return <Clock className="w-4 h-4 text-yellow-600" />
      case 'expired':
        return <XCircle className="w-4 h-4 text-red-600" />
      default:
        return <AlertTriangle className="w-4 h-4 text-gray-600" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800'
      case 'pending':
        return 'bg-yellow-100 text-yellow-800'
      case 'expired':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const uniqueRegions = [...new Set(concessions.map(c => c.region))].sort()

  if (!canEdit) {
    return (
      <div className="container mx-auto px-6 py-8">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
          <AlertTriangle className="w-12 h-12 text-yellow-600 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-yellow-800 mb-2">Access Restricted</h2>
          <p className="text-yellow-700">
            You do not have permission to edit mining concessions. Contact your administrator for access.
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-6 py-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Mining Concessions Management</h1>
          <p className="text-gray-600 mt-1">Manage and edit mining concession data</p>
        </div>
        <div className="flex items-center gap-3 mt-4 sm:mt-0">
          <button
            onClick={() => loadConcessions(true)}
            disabled={loading}
            className="flex items-center gap-2 px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors disabled:opacity-50"
            title="Refresh data from hosted layer"
          >
            <RotateCcw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            Refresh
          </button>
          <button
            onClick={() => setShowHistory(!showHistory)}
            className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
          >
            <RotateCcw className="w-4 h-4" />
            History
          </button>
          {hostedLayerEditable === false && (
            <button
              onClick={handleSyncPendingChanges}
              disabled={loading}
              className="flex items-center gap-2 px-3 py-2 bg-orange-100 text-orange-700 rounded-lg hover:bg-orange-200 transition-colors disabled:opacity-50"
              title="Sync pending changes to hosted layer"
            >
              <RotateCcw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              Sync
            </button>
          )}
          <button
            onClick={exportToCSV}
            className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <FileDown className="w-4 h-4" />
            Export
          </button>
          <button
            onClick={() => {
              console.log('=== DEBUG BUTTON CLICKED ===')
              concessionEditingService.debugCurrentState()
              console.log('Hosted layer editable:', hostedLayerEditable)
              console.log('Current concessions count:', concessions.length)
              console.log('Filtered concessions count:', filteredConcessions.length)
            }}
            className="flex items-center gap-2 px-3 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors"
            title="Debug current state"
          >
            🔍 Debug
          </button>
          <button
            onClick={() => {
              if (confirm('This will clear all local data and force reload from hosted layer. Continue?')) {
                console.log('🗑️ RESET: Clearing localStorage...')
                localStorage.removeItem('epa_mining_concessions_data')
                concessionEditingService.clearCache()
                miningDataService.clearCache()
                loadConcessions(true)
              }
            }}
            className="flex items-center gap-2 px-3 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
            title="Reset all local data"
          >
            🔄 Reset
          </button>
          <button
            onClick={() => {
              console.log('🔄 FORCE RESET: Clearing everything and reloading page...')
              localStorage.clear()
              window.location.reload()
            }}
            className="flex items-center gap-2 px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            title="Force reset and reload page"
          >
            ⚡ Force Reset
          </button>
          <button
            onClick={handleCreate}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            New Concession
          </button>
        </div>
      </div>

      {/* Debug: Data Loading Test */}
      <div className="mb-8">
        <DataLoadingTest />
      </div>

      {/* Debug: Direct ArcGIS Test */}
      <div className="mb-8">
        <DirectArcGISTest />
      </div>

      {/* Data Source Info */}
      {!loading && concessions.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <CheckCircle2 className="w-4 h-4 text-blue-600" />
              <span className="text-sm text-blue-800">
                Loaded {concessions.length} concessions from hosted layer data
              </span>
            </div>
            <span className="text-xs text-blue-600">
              Last updated: {new Date().toLocaleTimeString()}
            </span>
          </div>
          
          {/* Hosted Layer Editing Status */}
          {hostedLayerEditable !== null && (
            <div className="mt-2 flex items-center gap-2">
              {hostedLayerEditable ? (
                <>
                  <CheckCircle2 className="w-3 h-3 text-green-600" />
                  <span className="text-xs text-green-800">
                    Hosted layer supports editing - changes will sync automatically
                  </span>
                </>
              ) : (
                <>
                  <AlertTriangle className="w-3 h-3 text-orange-600" />
                  <span className="text-xs text-orange-800">
                    Hosted layer is read-only - changes saved locally only
                  </span>
                </>
              )}
            </div>
          )}
        </div>
      )}

      {/* Debug Component (temporary) */}
      <DataSourceDebug className="mb-6" />

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
              <input
                type="text"
                placeholder="Search concessions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
          <div className="flex gap-4">
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="all">All Status</option>
              <option value="active">Active</option>
              <option value="pending">Pending</option>
              <option value="expired">Expired</option>
            </select>
            <select
              value={regionFilter}
              onChange={(e) => setRegionFilter(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="all">All Regions</option>
              {uniqueRegions.map(region => (
                <option key={region} value={region}>{region}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Building className="w-6 h-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Concessions</p>
              <p className="text-2xl font-bold text-gray-900">{concessions.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <CheckCircle2 className="w-6 h-6 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Active</p>
              <p className="text-2xl font-bold text-gray-900">
                {concessions.filter(c => c.status === 'active').length}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-100 rounded-lg">
              <Clock className="w-6 h-6 text-yellow-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Pending</p>
              <p className="text-2xl font-bold text-gray-900">
                {concessions.filter(c => c.status === 'pending').length}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-red-100 rounded-lg">
              <XCircle className="w-6 h-6 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Expired</p>
              <p className="text-2xl font-bold text-gray-900">
                {concessions.filter(c => c.status === 'expired').length}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Editing History Panel */}
      {showHistory && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Editing History</h3>
          <div className="space-y-3">
            {editingHistory.slice(0, 10).map((entry, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="flex-shrink-0">
                    {entry.action === 'create' && <Plus className="w-4 h-4 text-green-600" />}
                    {entry.action === 'update' && <Edit3 className="w-4 h-4 text-blue-600" />}
                    {entry.action === 'delete' && <Trash2 className="w-4 h-4 text-red-600" />}
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">
                      {entry.action.charAt(0).toUpperCase() + entry.action.slice(1)}d: {entry.concessionName}
                    </p>
                    <p className="text-xs text-gray-600">
                      by {entry.editedBy} on {new Date(entry.timestamp).toLocaleString()}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {editingHistory.length === 0 && (
              <p className="text-gray-500 text-center py-4">No editing history available</p>
            )}
          </div>
        </div>
      )}

      {/* Concessions Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Concession
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Owner
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Size
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Location
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Expiry
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={7} className="px-6 py-12 text-center">
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                      <span className="ml-2 text-gray-600">Loading hosted layer data for editing...</span>
                    </div>
                  </td>
                </tr>
              ) : filteredConcessions.length === 0 ? (
                <tr>
                  <td colSpan={7} className="px-6 py-12 text-center text-gray-500">
                    No concessions found matching your criteria
                  </td>
                </tr>
              ) : (
                filteredConcessions.map((concession) => (
                  <tr key={concession.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">{concession.name}</div>
                        <div className="text-sm text-gray-500">{concession.permitType}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {concession.owner}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {concession.size} ha
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(concession.status)}`}>
                        {getStatusIcon(concession.status)}
                        {concession.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center gap-1 text-sm text-gray-900">
                        <MapPin className="w-3 h-3 text-gray-400" />
                        {concession.district}, {concession.region}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(concession.permitExpiryDate).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end gap-2">
                        <button
                          onClick={() => handleEdit(concession)}
                          className="text-blue-600 hover:text-blue-900 p-1 rounded"
                          title="Edit concession"
                        >
                          <Edit3 className="w-4 h-4" />
                        </button>
                        {canDelete && (
                          <button
                            onClick={() => setDeleteConfirm(concession.id)}
                            className="text-red-600 hover:text-red-900 p-1 rounded"
                            title="Delete concession"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {deleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6">
            <div className="flex items-center gap-3 text-red-600 mb-4">
              <AlertTriangle className="w-6 h-6" />
              <h2 className="text-lg font-semibold">Confirm Deletion</h2>
            </div>
            <p className="text-gray-600 mb-6">
              Are you sure you want to delete this concession? This action cannot be undone.
            </p>
            <div className="flex items-center justify-end gap-3">
              <button
                onClick={() => setDeleteConfirm(null)}
                className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={() => handleDelete(deleteConfirm)}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Concession Form Modal */}
      {showForm && (
        <ConcessionForm
          concession={editingConcession}
          onClose={handleFormClose}
          onSave={handleFormSave}
        />
      )}
    </div>
  )
}
